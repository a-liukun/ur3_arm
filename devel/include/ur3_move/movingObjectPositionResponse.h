// Generated by gencpp from file ur3_move/movingObjectPositionResponse.msg
// DO NOT EDIT!


#ifndef UR3_MOVE_MESSAGE_MOVINGOBJECTPOSITIONRESPONSE_H
#define UR3_MOVE_MESSAGE_MOVINGOBJECTPOSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ur3_move
{
template <class ContainerAllocator>
struct movingObjectPositionResponse_
{
  typedef movingObjectPositionResponse_<ContainerAllocator> Type;

  movingObjectPositionResponse_()
    : receive(false)  {
    }
  movingObjectPositionResponse_(const ContainerAllocator& _alloc)
    : receive(false)  {
  (void)_alloc;
    }



   typedef uint8_t _receive_type;
  _receive_type receive;





  typedef boost::shared_ptr< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct movingObjectPositionResponse_

typedef ::ur3_move::movingObjectPositionResponse_<std::allocator<void> > movingObjectPositionResponse;

typedef boost::shared_ptr< ::ur3_move::movingObjectPositionResponse > movingObjectPositionResponsePtr;
typedef boost::shared_ptr< ::ur3_move::movingObjectPositionResponse const> movingObjectPositionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator1> & lhs, const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.receive == rhs.receive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator1> & lhs, const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur3_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7015dad2877ea1de0b9f990426d1de00";
  }

  static const char* value(const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7015dad2877ea1deULL;
  static const uint64_t static_value2 = 0x0b9f990426d1de00ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur3_move/movingObjectPositionResponse";
  }

  static const char* value(const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool receive\n"
"\n"
;
  }

  static const char* value(const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.receive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movingObjectPositionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur3_move::movingObjectPositionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur3_move::movingObjectPositionResponse_<ContainerAllocator>& v)
  {
    s << indent << "receive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.receive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3_MOVE_MESSAGE_MOVINGOBJECTPOSITIONRESPONSE_H
