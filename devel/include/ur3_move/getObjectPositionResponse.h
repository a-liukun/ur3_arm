// Generated by gencpp from file ur3_move/getObjectPositionResponse.msg
// DO NOT EDIT!


#ifndef UR3_MOVE_MESSAGE_GETOBJECTPOSITIONRESPONSE_H
#define UR3_MOVE_MESSAGE_GETOBJECTPOSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace ur3_move
{
template <class ContainerAllocator>
struct getObjectPositionResponse_
{
  typedef getObjectPositionResponse_<ContainerAllocator> Type;

  getObjectPositionResponse_()
    : target_pose()
    , angle(0.0)  {
    }
  getObjectPositionResponse_(const ContainerAllocator& _alloc)
    : target_pose(_alloc)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;

   typedef double _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getObjectPositionResponse_

typedef ::ur3_move::getObjectPositionResponse_<std::allocator<void> > getObjectPositionResponse;

typedef boost::shared_ptr< ::ur3_move::getObjectPositionResponse > getObjectPositionResponsePtr;
typedef boost::shared_ptr< ::ur3_move::getObjectPositionResponse const> getObjectPositionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur3_move::getObjectPositionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur3_move::getObjectPositionResponse_<ContainerAllocator1> & lhs, const ::ur3_move::getObjectPositionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.target_pose == rhs.target_pose &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur3_move::getObjectPositionResponse_<ContainerAllocator1> & lhs, const ::ur3_move::getObjectPositionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur3_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8832b43bcca705609177655db03e7a0a";
  }

  static const char* value(const ::ur3_move::getObjectPositionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8832b43bcca70560ULL;
  static const uint64_t static_value2 = 0x9177655db03e7a0aULL;
};

template<class ContainerAllocator>
struct DataType< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur3_move/getObjectPositionResponse";
  }

  static const char* value(const ::ur3_move::getObjectPositionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose target_pose\n"
"float64 angle\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ur3_move::getObjectPositionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pose);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getObjectPositionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur3_move::getObjectPositionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur3_move::getObjectPositionResponse_<ContainerAllocator>& v)
  {
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR3_MOVE_MESSAGE_GETOBJECTPOSITIONRESPONSE_H
